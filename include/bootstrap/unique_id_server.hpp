#pragma once

#include <vector>
#include <optional>
#include <seastar/core/future.hh>
#include <seastar/core/gate.hh>
#include <seastar/net/api.hh>
#include "bootstrap/unique_id.hpp"

namespace bootstrap {

/**
 * @brief Server implementation for UniqueID exchange
 * 
 * This class implements the server-side logic for UniqueID exchange.
 * It generates a unique ID and serves it to connecting clients.
 */
class unique_id_server {
public:
    /**
     * @brief Construct a new unique id server object
     * 
     * @param listen_address The address to listen on
     */
    explicit unique_id_server(seastar::socket_address listen_address);
    
    /**
     * @brief Start the server
     * 
     * @return seastar::future<> Future that resolves when server is started
     */
    seastar::future<> start();
    
    /**
     * @brief Stop the server
     * 
     * @return seastar::future<> Future that resolves when server is stopped
     */
    seastar::future<> stop();
    
    /**
     * @brief Get the unique ID generated by this server
     * 
     * @return const unique_id& Reference to the unique ID
     */
    const unique_id& get_unique_id() const;

private:
    seastar::socket_address _listen_address;
    unique_id _id;
    seastar::gate _gate;
    std::optional<seastar::server_socket> _server_socket;
    
    /**
     * @brief Handle a client connection
     * 
     * @param socket The connected socket
     * @param addr The client address
     * @return seastar::future<> Future that resolves when connection is handled
     */
    seastar::future<> handle_connection(seastar::connected_socket socket, 
                                       seastar::socket_address addr);
};

} // namespace bootstrap
